#!/usr/bin/env node
/**
#npm install	yarn install
#npm install --flat yarn install --flat
#(N/A)	yarn install --har
#(N/A)	yarn install --no-lockfile
#(N/A)	yarn install --pure-lockfile
#npm install [package]	(N/A)
#npm install --save [package]	yarn add [package]
#npm install --save-dev [package]	yarn add [package] --dev
#(N/A)	yarn add [package] --peer
#npm install --save-optional [package]	yarn add [package] --optional
#npm install --save-exact [package]	yarn add [package] --exact
#(N/A)	yarn add [package] --tilde
#npm install --global [package]	yarn global add [package]
#npm uninstall [package]	(N/A)
#npm uninstall --save [package]	yarn remove [package]
#npm uninstall --save-dev [package]	yarn remove [package]
#npm uninstall --save-optional [package]	yarn remove [package]
#rm -rf node_modules && npm install	yarn upgrade
**/

var debug = require('debug')
var program = require('commander');
var Q = require('q');
var fs = require('fs');
var path = require('path');
var log = function(promise) {
  return promise
    .then(function() {
      process.exit(0);
    })
    .catch(function(error) {
      console.log();
      console.error(error.stack || error.message || error);
      console.log();

      process.exit(1);
    });
};

var spawn = function(cmd, args, options) {
  options = options || {};
  // program.rawArgs.slice(2)
  options.stdio = 'inherit';

  if (!options.cwd) {
    options.cwd = process.cwd();
  }

  if (!fs.existsSync('/usr/local/bin/yarn')) {
    var msg = 'Could not find local Yarn binary (/usr/local/bin/yarn)';
    return Q.reject(new Error(msg));
  }

  var child = require('cross-spawn')(cmd, args, options);
  var deferred = Q.defer();

  child.on('exit', function(status) {
    if(status) {
      deferred.reject(new Error('Command `' + cmd +
        '` did not complete successfully'));
    } else {
      deferred.resolve(child);
    }
  });

  return deferred.promise;
};


var runBinary = function(args, options, types) {
  options = options || {};


      if (!fs.existsSync('/usr/local/bin/yarn')) {
        var msg = 'Could not find local Yarn binary (/usr/local/bin/yarn)';
        return Q.reject(new Error(msg));
      }

      if (!options.cwd) {
        options.cwd = root;
      }

      return utils.spawn('/usr/local/bin/yarn', args, options);


};

help = function() {
  return runBinary(['--help']);
};


program
  .version('0.1.1')
//   .option("-i, --install", "Install Packages")

program
  .command('uninstall').alias('r').alias('unisntall').alias('remove')
  .description('runs yarn add')
  .option("-U, --uninstall", "show versions")
  .option("-v, --version", "show version")
  .option("-G, --global", "Use Global Node Folder")
  .option("-S, --save", "save to package.json depdencys")
  .option("-D, --save-dev", "save to package.json devDependencys")
  .action(function(env,opts){
    var yarnArgs= []
    var pkgs = program.args;
    if (opts.global) {
      console.log('  global: remove');
      yarnArgs.push('global')
    }
    // install
    yarnArgs.push('remove')
    pkgs.forEach(function(pkg){
      if (typeof pkg !== 'string') {
        return
      }
      console.log('  remove : %s', pkg);
      yarnArgs.push(pkg)
    });
    yarnArgs.push('--ignore-engines')
    return spawn('yarn',yarnArgs)
    console.log(yarnArgs)
    //console.log(env,JSON.stringify(program.Option))
  })


var install = function(env,opts){
  var yarnArgs= []
  var pkgs = program.args;

  // console.log('  global: install');
  if (opts.global) {
    console.log('  global: install');
    // yarnArgs.push('yarn')
    yarnArgs.push('global')
  } else {
    // yarnArgs.push('yarn')
  }
  // install
  yarnArgs.push('add')

  pkgs.forEach(function(pkg){
    if (pkg === 'install') {
      return
    }else if (typeof pkg !== 'string') {
      if (program.rawArgs.pop() ==='install') {
        console.log('install only')
        yarnArgs.pop()
        yarnArgs.push('install')
      }
      return
    }
    console.log('  install : %s', pkg);
    yarnArgs.push(pkg)
  });
  yarnArgs.push('--ignore-engines')

  spawn('yarn',yarnArgs)
}


//, {isDefault: true}
program
  .command('install').alias('i').alias('isntall')
  .description('runs yarn add')
  .option("-i", "sshow version")
  .option("-v, --version", "show version")
  .option("-G, --global", "Use Global Node Folder")
  .option("-S, --save", "save to package.json depdencys")
  .option("-D, --save-dev", "save to package.json devDependencys")
  .action(install)

program
  .command('*')
	.action(install)
/*
  {
		//program.help()
    install()
		//process.exit(0)
	})
*/
program.parse(process.argv);

/*
program
  .command('*')
  .action(function(env){
    console.log('ANY')
  });

if (!program.args.length) {
//  program.help();
}
*/
/**
basedir=`dirname "$0"`

set -- "${@:1}" "new" "${@:2}"
STR=$@

if [[ $STR == *"-v"* ]]
then
	yarn -V
	exit 0
fi

if [[ $STR == *"--loglevel error"* ]]
then
  echo "--loglevel It's there!";
  echo Current: $STR
  STR=$(echo "$@" | sed -r 's/--loglevel error//g' | xargs)
  echo "$STR" | awk '{print NF}'
  echo New: $STR

fi



if [[ $STR == *"--global"* ]]
then
  echo "global It's there!";
 echo Current: $STR
  STR=$(echo "$@" | sed -r 's/--global//g' | xargs)
  ISGLOBAL="global"
  echo New: $STR
        echo "$STR" | awk '{print NF}'

fi

if [[ $STR == *"--install"* ]]
then
  echo "install option It's there!";
  STR=$(echo "${@:2}" | sed -r 's/--install//g' | xargs)
  CMDSTR="add $ISGLOBAL"
  echo "$STR" | awk '{print NF}'

fi


if [[ $STR == *"install "* ]]
then
  echo "install It's there!";
  STR=$(echo "$STR" | sed -r 's/install//' | xargs)
  CMDSTR="add $ISGLOBAL"
   echo "$STR" | awk '{print NF}'
fi

if [[ $STR == *"i "* ]]
then
  echo "i It's there!";
  STR=$(echo "$STR" | sed -r 's/i //')
  CMDSTR="add $ISGLOBAL"
  echo "$STR" | awk '{print NF}'
fi

#  [--save|--save-dev|--save-optional] [--save-exact]

if [[ $STR == *"--save"* ]]
then
  echo "--save It's there!";
  STR=$(echo "$STR" | sed -r 's/--save//g')
  echo "$STR" | awk '{print NF}'

fi

if [[ $STR == *"-dev"* ]]
then
  echo "-dev It's there!";
  STR=$(echo "$STR" | sed -r 's/-dev//g')
  echo "$STR" | awk '{print NF}'

fi

if [[ $STR == *"-v"* ]]
then
  echo "-v It's there!";
  STR=$(echo "$STR" | sed -r 's/-v/-V/')
fi


if [[ $STR == *"-optional"* ]]
then
  echo "-optional It's there!";
  STR=$(echo "$STR" | sed -r 's/-optional//g')
fi

if [[ $STR == *"-exact"* ]]
then
  echo "-exact It's there!";
  STR=$(echo "$STR" | sed -r 's/-exact//g')
fi


echo "yarn $CMDSTR $STR"
CMDENGINS="--ignore-engines"


if [[ $STR == *"--new-version"* ]]
then
  echo "--new-version It's there!";
  CMDENGINS=""
  #STR=$(echo "$STR" | sed -r 's/-exact//g')
fi


yarn $CMDSTR $STR $CMDENGINS
# "$NODE_EXE" "$NPM_CLI_JS" "$@"
**/
